# -*- coding: utf-8 -*-
"""Prediction_Model_Covid_Adya.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/186WCWCwdW8CtCDfoWAPYwMqbhYTvIJDf
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn import linear_model
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeClassifier

pd.read_csv('/content/drive/My Drive/Copy of COVID19 cases.csv')

df_covid = pd.read_csv('/content/drive/My Drive/Copy of COVID19 cases.csv')

df_covid.shape

df_covid.isnull().sum()

df_covid.isnull().any(axis = 1)

df_covid.drop(['Neighbourhood Name','FSA'],axis = 1)

df_covid2 = df_covid.drop(['Neighbourhood Name','FSA'],axis = 1)

df_covid2.dropna(axis = 0, how = 'any')

df_covid3 = df_covid2.dropna(axis = 0, how = 'any')

df_covid3.isnull().sum()

df_covid3.nunique()

df_covid3.drop(['_id','Assigned_ID'],axis = 1)

df_covidfinal = df_covid3.drop(['_id','Assigned_ID'],axis = 1)

df_covidfinal['Outbreak Associated'] = df_covidfinal['Outbreak Associated'].map({'Sporadic':1,'Outbreak Associated':0})

df_covidfinal['Outbreak Associated']

df_covidfinal['Age Group'] = df_covidfinal['Age Group'].map( {'19 and younger':1, '20 to 29 Years':2, '30 to 39 Years':3, '40 to 49 Years':4, '50 to 59 Years':5, '60 to 69 Years':6, '70 to 79 Years':7, '80 to 89 Years':8})

df_covidfinal['Age Group']

df_covidfinal

ax = sns.barplot(x='Age Group', y='Age Group', data=df_covidfinal, hue='Ever Hospitalized', estimator=lambda x: len(x) / len(df_covidfinal) * 100)
ax.set(xlabel='Numerical Age Groups', ylabel="Percentage")

true_age = df_covidfinal['Age Group']

from sklearn import preprocessing
le = preprocessing.LabelEncoder()

df_covid_X=df_covidfinal.drop(columns = ['Ever Hospitalized'])
df_covid_Y=df_covidfinal[['Ever Hospitalized']]

df_covid_HE_X = df_covid_X.apply(le.fit_transform)
df_covid_HE_X.head()
df_covid_Y.head()

X_train, X_test, y_train, y_test = train_test_split(df_covid_HE_X, df_covid_Y, test_size = .15, random_state=133)

from sklearn.metrics import confusion_matrix

from sklearn import tree
model = tree.DecisionTreeClassifier()

model.fit(X_train, y_train)
predicted_covid = model.predict(X_test)
predicted_covid
confusion_matrix(y_test, predicted_covid)

from sklearn.metrics import accuracy_score

ac = accuracy_score(y_test,predicted_covid)
print("Accuracy is %:" ,ac*100)

from sklearn.linear_model import LogisticRegression

logreg = LogisticRegression(C=1e5)
y = df_covid_Y
logreg.fit (df_covid_HE_X,y)

y_pred = logreg.predict(df_covid_HE_X)

cf_matrix = confusion_matrix(y, y_pred)
cf_matrix

import seaborn as sns
group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ["{0:0.0f}".format(value) for value in cf_matrix.flatten()]
group_percentages = ["{0:.2%}".format(value) for value in cf_matrix.flatten()/np.sum(cf_matrix)]
labels = [f"{v1}\n{v2}\n{v3}" for v1, v2, v3 in zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cf_matrix, annot=labels, fmt='', cmap='Blues')